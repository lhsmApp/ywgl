<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="TestQuestionMapper">
	
	<!--表名 -->
	<sql id="tableName">
		tb_test_question
	</sql>
	
	<sql id="tableItem">
		tb_test_question_item
	</sql>
	
	<!-- 字段 -->
	<sql id="Field">
		TEST_QUESTION_ID,	
		TEST_QUESTION_TITLE,	
		COURSE_TYPE_ID,	
		TEST_QUESTION_TYPE,	
		TEST_QUESTION_DIFFICULTY,	
		TEST_QUESTION_SCORE,	
		TEST_QUESTION_ANSWER,	
		TEST_ANSWER_NOTE,	
		STATE,	
		CREATE_USER,	
		CREATE_DATE	
	</sql>
	
	<!-- 字段值 -->
	<sql id="FieldValue">
		#{TEST_QUESTION_ID},	
		#{TEST_QUESTION_TITLE},	
		#{COURSE_TYPE_ID},	
		#{TEST_QUESTION_TYPE},	
		#{TEST_QUESTION_DIFFICULTY},	
		#{TEST_QUESTION_SCORE},	
		#{TEST_QUESTION_ANSWER},	
		#{TEST_ANSWER_NOTE},	
		#{STATE},	
		#{CREATE_USER},	
		#{CREATE_DATE}	
	</sql>
	
	<!-- 新增-->
	<insert id="save" parameterType="pd">
		insert into 
	<include refid="tableName"></include>
		(
	<include refid="Field"></include>
		) values (
	<include refid="FieldValue"></include>
		)
	</insert>
	
	<!-- 新增-->
	<insert id="saveItem" parameterType="pd">
			insert into 
	<include refid="tableItem"></include>
		(
			TEST_QUESTION_ID,
			TEST_QUESTION_ITEM_TITLE,
			TEST_QUESTION_ITEM_CONTENT,
			STATE,
			CREATE_USER,
			CREATE_DATE
		) values (
			#{TEST_QUESTION_ID},
			#{TEST_QUESTION_ITEM_TITLE},
			#{TEST_QUESTION_ITEM_CONTENT},
			#{STATE},
			#{CREATE_USER},
			#{CREATE_DATE}
		)
	</insert>

	<!-- 删除-->
	<update id="delete" parameterType="pd">
		update
		<include refid="tableName"></include>
		set
			STATE = 0
		where 
			TEST_QUESTION_ID = #{TEST_QUESTION_ID}
	</update>
	
	<!-- 修改 -->
	<update id="edit" parameterType="pd">
		update
		<include refid="tableName"></include>
		set 
			TEST_QUESTION_TITLE = #{TEST_QUESTION_TITLE},
			COURSE_TYPE_ID = #{COURSE_TYPE_ID},
			TEST_QUESTION_TYPE = #{TEST_QUESTION_TYPE},
			TEST_QUESTION_DIFFICULTY = #{TEST_QUESTION_DIFFICULTY},
			TEST_QUESTION_SCORE = #{TEST_QUESTION_SCORE},
			TEST_QUESTION_ANSWER = #{TEST_QUESTION_ANSWER},
			TEST_ANSWER_NOTE = #{TEST_ANSWER_NOTE}
		where 
			TEST_QUESTION_ID = #{TEST_QUESTION_ID}
	</update>
	
	<!-- 通过ID获取数据 -->
	<select id="findById" parameterType="pd" resultType="pd">
		select 
			a.TEST_QUESTION_ID,	
			a.TEST_QUESTION_TITLE,	
			a.COURSE_TYPE_ID,
			b.COURSE_TYPE_NAME,	
			a.TEST_QUESTION_TYPE,	
			a.TEST_QUESTION_DIFFICULTY,	
			a.TEST_QUESTION_SCORE,	
			a.TEST_QUESTION_ANSWER,	
			a.TEST_ANSWER_NOTE,	
			a.CREATE_USER,	
			a.CREATE_DATE
		from 
			tb_test_question AS a
		left join
			tb_course_type AS b
		on 
			a.COURSE_TYPE_ID = b.COURSE_TYPE_ID
		where
			a.TEST_QUESTION_ID = #{TEST_QUESTION_ID}
	</select>
	
	<!-- 列表 -->
	<select id="datalistPage" parameterType="page" resultType="pd">
		select 
			a.TEST_QUESTION_ID,	
			a.TEST_QUESTION_TITLE,	
			b.COURSE_TYPE_NAME,	
			a.TEST_QUESTION_TYPE,	
			a.TEST_QUESTION_DIFFICULTY,	
			a.TEST_QUESTION_SCORE,	
			a.TEST_QUESTION_ANSWER,	
			a.TEST_ANSWER_NOTE,	
			a.CREATE_USER,	
			a.CREATE_DATE
		from 
			tb_test_question AS a
		left join
			tb_course_type AS b
		on 
			a.COURSE_TYPE_ID = b.COURSE_TYPE_ID
		where 
			a.STATE = 1
		<if test="pd.keywords!= null and pd.keywords != ''"><!-- 关键词检索 -->
		and
				(
			a.TEST_QUESTION_TITLE LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%')
				<!--	根据需求自己加检索条件
					
					 or 
					字段2 LIKE CONCAT(CONCAT('%', #{pd.keywords}),'%') 
				-->
				)
		</if>
		<if test="pd.COURSE_TYPE_ID != null and pd.COURSE_TYPE_ID != ''"><!-- 去新增试题页面检索条件 -->
		and
			a.COURSE_TYPE_ID = #{pd.COURSE_TYPE_ID}
		</if>
	</select>
	<!-- 列表(全部) -->
	<select id="listAll" parameterType="pd" resultType="pd">
		select
		<include refid="Field"></include>
		from 
		<include refid="tableName"></include>
	</select>
	
	<!-- 批量删除 -->
	<update id="deleteAll" parameterType="String">
		update
		<include refid="tableName"></include>
		set
			STATE = 0
		where  
			TEST_QUESTION_ID in
		<foreach item="item" index="index" collection="array" open="(" separator="," close=")">
                 #{item}
		</foreach>
	</update>
	
	<!-- 根据试题id查询所有答案 -->
	<select id="listById" parameterType="pd" resultType="pd">
		select
			TEST_QUESTION_ID,
			TEST_QUESTION_ITEM_TITLE,
			TEST_QUESTION_ITEM_CONTENT
		from
			<include refid="tableItem"></include>
		where
			TEST_QUESTION_ID = #{TEST_QUESTION_ID}
		and
			STATE = 1
	</select>
	<!-- 删除-->
	<delete id="deleteItem" parameterType="String">
		delete from
		<include refid="tableItem"></include>
		where 
			TEST_QUESTION_ID = #{TEST_QUESTION_ID}
	</delete>
	<!-- 根据试题id查询所有答案 -->
	<select id="countQuestion" parameterType="pd" resultType="pd">
		select
			COUNT(TEST_QUESTION_ID) AS number
		from
			<include refid="tableName"></include>
		where
			COURSE_TYPE_ID = #{COURSE_TYPE_ID}
		and
			TEST_QUESTION_TYPE = #{TEST_QUESTION_TYPE}		
		and
			TEST_QUESTION_DIFFICULTY = #{TEST_QUESTION_DIFFICULTY}
		and
			STATE = 1
		<if test="TEST_QUESTION_SCORE != null and TEST_QUESTION_SCORE != ''">
		and
			TEST_QUESTION_SCORE =#{TEST_QUESTION_SCORE}
		</if>
	</select>
	
	<select id="randomList" parameterType="pd" resultType="pd">
		select 
			a.TEST_QUESTION_ID,	
			a.TEST_QUESTION_TITLE,	
			a.COURSE_TYPE_ID,
			b.COURSE_TYPE_NAME,	
			a.TEST_QUESTION_TYPE,	
			a.TEST_QUESTION_DIFFICULTY,	
			a.TEST_QUESTION_SCORE,	
			a.TEST_QUESTION_ANSWER,	
			a.TEST_ANSWER_NOTE,	
			a.CREATE_USER,	
			a.CREATE_DATE
		from 
			tb_test_question AS a
		left join
			tb_course_type AS b
		on 
			a.COURSE_TYPE_ID = b.COURSE_TYPE_ID
		where
			a.COURSE_TYPE_ID = #{COURSE_TYPE_ID}
		and
			a.TEST_QUESTION_TYPE = #{TEST_QUESTION_TYPE}		
		and
			a.TEST_QUESTION_DIFFICULTY = #{TEST_QUESTION_DIFFICULTY}
		and
			a.STATE = 1
		and
			a.TEST_QUESTION_SCORE =#{TEST_QUESTION_SCORE}
	</select>
	
</mapper>